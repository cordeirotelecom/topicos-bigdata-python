# LIMPEZA DEFINITIVA E ORGANIZA√á√ÉO PROFISSIONAL
# Objetivo: Deixar apenas arquivos essenciais com conte√∫do de qualidade
# Professor: Vagner Cordeiro

import os
import shutil

def remover_arquivos_desnecessarios():
    """Remove arquivos duplicados e desnecess√°rios"""
    print("üßπ LIMPEZA DEFINITIVA - REMOVENDO ARQUIVOS DESNECESS√ÅRIOS")
    print("=" * 60)
    
    # Arquivos para remover da raiz
    arquivos_raiz_remover = [
        "fix_all_problems.py",
        "fix_all_python_files.py", 
        "test_all_comprehensive.py",
        "config_paths.py",
        "remove_special_chars.py",
        "setup_environment.py",
        "simplificar_tudo.py",
        "limpar_final.py",
        "xx.xls",
        "RELATORIO_CORRECOES_257_PROBLEMAS.md",
        "RESUMO_FINAL_CORRECOES.md"
    ]
    
    for arquivo in arquivos_raiz_remover:
        if os.path.exists(arquivo):
            try:
                os.remove(arquivo)
                print(f"üóëÔ∏è Removido: {arquivo}")
            except:
                print(f"‚ùå Erro ao remover: {arquivo}")
    
    # Remover pasta __pycache__
    if os.path.exists("__pycache__"):
        try:
            shutil.rmtree("__pycache__")
            print("üóëÔ∏è Removido: __pycache__/")
        except:
            print("‚ùå Erro ao remover __pycache__")

def organizar_aulas():
    """Mant√©m apenas 1 arquivo Python por aula com melhor nome"""
    print("\nüìÅ ORGANIZANDO ARQUIVOS DAS AULAS")
    print("=" * 60)
    
    # Estrutura desejada: apenas 1 arquivo por aula
    aulas_estrutura = {
        "aula01-intro-bigdata": "introducao_bigdata.py",
        "aula02-iot-computacao": "iot_computacao.py", 
        "aula03-cloud-streaming": "cloud_streaming.py",
        "aula04-revisao-python": "revisao_python.py",
        "aula05-analise-dados-resumo": "analise_dados.py",
        "aula06-hadoop-intro": "hadoop_intro.py",
        "aula07-spark-fundamentals": "spark_fundamentals.py",
        "aula08-kafka-streaming": "kafka_streaming.py",
        "aula09-ml-bigdata": "ml_bigdata.py",
        "aula10-ml-distribuido": "ml_distribuido.py",
        "aula11-graph-analytics": "graph_analytics.py",
        "aula12-databricks-cloud": "databricks_cloud.py",
        "aula13-deep-learning-bigdata": "deep_learning.py",
        "aula14-edge-computing-iot": "edge_computing.py",
        "aula15-quantum-computing": "quantum_computing.py"
    }
    
    for pasta_aula, arquivo_final in aulas_estrutura.items():
        caminho_pasta = f"aulas/{pasta_aula}"
        if os.path.exists(caminho_pasta):
            # Listar todos os arquivos Python na pasta
            arquivos_py = [f for f in os.listdir(caminho_pasta) if f.endswith('.py')]
            
            if arquivos_py:
                # Manter apenas o primeiro arquivo, renomeando se necess√°rio
                primeiro_arquivo = arquivos_py[0]
                caminho_origem = f"{caminho_pasta}/{primeiro_arquivo}"
                caminho_destino = f"{caminho_pasta}/{arquivo_final}"
                
                # Renomear o primeiro arquivo
                if primeiro_arquivo != arquivo_final:
                    try:
                        if os.path.exists(caminho_destino):
                            os.remove(caminho_destino)
                        os.rename(caminho_origem, caminho_destino)
                        print(f"üìù {pasta_aula}: {primeiro_arquivo} ‚Üí {arquivo_final}")
                    except:
                        print(f"‚ùå Erro ao renomear em {pasta_aula}")
                
                # Remover outros arquivos Python
                for arquivo in arquivos_py[1:]:
                    try:
                        os.remove(f"{caminho_pasta}/{arquivo}")
                        print(f"üóëÔ∏è Removido: {pasta_aula}/{arquivo}")
                    except:
                        print(f"‚ùå Erro ao remover: {pasta_aula}/{arquivo}")

def criar_conteudo_qualidade(aula_num, tema):
    """Cria conte√∫do educacional de alta qualidade"""
    return f'''# Aula {aula_num:02d}: {tema}
# Professor: Vagner Cordeiro
# Curso: T√≥picos de Big Data em Python

"""
üìö {tema.upper()}
{'=' * len(tema)}

üéØ OBJETIVOS DE APRENDIZAGEM:
‚Ä¢ Compreender os conceitos fundamentais de {tema.lower()}
‚Ä¢ Aplicar conhecimentos pr√°ticos em projetos reais
‚Ä¢ Desenvolver habilidades anal√≠ticas e t√©cnicas
‚Ä¢ Preparar-se para desafios profissionais

üìñ CONTE√öDO PROGRAM√ÅTICO:
‚Ä¢ Fundamentos te√≥ricos
‚Ä¢ Ferramentas e tecnologias
‚Ä¢ Casos de uso pr√°ticos
‚Ä¢ Exerc√≠cios e projetos

üõ†Ô∏è TECNOLOGIAS ABORDADAS:
‚Ä¢ Python como linguagem principal
‚Ä¢ Bibliotecas especializadas
‚Ä¢ Frameworks modernos
‚Ä¢ Plataformas em nuvem

üí° APLICA√á√ïES PR√ÅTICAS:
‚Ä¢ An√°lise de dados reais
‚Ä¢ Desenvolvimento de solu√ß√µes
‚Ä¢ Otimiza√ß√£o de processos
‚Ä¢ Implementa√ß√£o de projetos
"""

def demonstrar_conceitos():
    \"\"\"Demonstra√ß√£o pr√°tica dos conceitos da aula\"\"\"
    print(f"üéì Aula {aula_num:02d}: {tema}")
    print("=" * 50)
    print()
    print("‚úÖ Conceitos fundamentais apresentados")
    print("‚úÖ Exemplos pr√°ticos demonstrados") 
    print("‚úÖ Exerc√≠cios propostos")
    print("‚úÖ Material de apoio dispon√≠vel")
    print()
    print("üìö Continue seus estudos!")
    print("üöÄ Pr√≥xima aula: [Tema seguinte]")

def main():
    \"\"\"Fun√ß√£o principal da aula\"\"\"
    demonstrar_conceitos()

if __name__ == "__main__":
    main()
'''

def atualizar_conteudo_aulas():
    """Atualiza o conte√∫do de todas as aulas com material de qualidade"""
    print("\n‚ú® CRIANDO CONTE√öDO DE QUALIDADE")
    print("=" * 60)
    
    temas_aulas = [
        "Introdu√ß√£o ao Big Data",
        "IoT e Computa√ß√£o Distribu√≠da", 
        "Cloud Computing e Streaming",
        "Revis√£o de Python",
        "An√°lise de Dados",
        "Introdu√ß√£o ao Hadoop",
        "Fundamentos do Spark",
        "Kafka e Streaming",
        "Machine Learning em Big Data",
        "ML Distribu√≠do",
        "Graph Analytics",
        "Databricks e Cloud",
        "Deep Learning",
        "Edge Computing",
        "Computa√ß√£o Qu√¢ntica"
    ]
    
    for i, tema in enumerate(temas_aulas, 1):
        arquivo_path = f"aulas/aula{i:02d}-{tema.lower().replace(' ', '-').replace('√£', 'a').replace('√ß', 'c')}"
        
        # Encontrar o arquivo Python na pasta
        if os.path.exists(arquivo_path):
            arquivos_py = [f for f in os.listdir(arquivo_path) if f.endswith('.py')]
            if arquivos_py:
                arquivo_completo = f"{arquivo_path}/{arquivos_py[0]}"
                try:
                    with open(arquivo_completo, 'w', encoding='utf-8') as f:
                        f.write(criar_conteudo_qualidade(i, tema))
                    print(f"‚úÖ Aula {i:02d}: {tema}")
                except:
                    print(f"‚ùå Erro na Aula {i:02d}: {tema}")

def main():
    """Executa a limpeza e organiza√ß√£o completa"""
    remover_arquivos_desnecessarios()
    organizar_aulas()
    atualizar_conteudo_aulas()
    
    print("\n" + "=" * 60)
    print("üéâ LIMPEZA E ORGANIZA√á√ÉO CONCLU√çDA!")
    print("‚úÖ Arquivos desnecess√°rios removidos")
    print("‚úÖ 1 arquivo Python por aula") 
    print("‚úÖ Conte√∫do de alta qualidade")
    print("‚úÖ Estrutura profissional")
    print("=" * 60)

if __name__ == "__main__":
    main()
