# SCRIPT PARA SIMPLIFICAR TODO O REPOSIT√ìRIO
# Objetivo: Deixar tudo limpo, bonito e sem erros
# Professor: Vagner Cordeiro

import os
import glob

def criar_conteudo_simples(nome_arquivo, pasta_aula):
    """Cria conte√∫do super simplificado para cada arquivo"""
    
    # Extrair n√∫mero da aula
    aula_num = pasta_aula.split('aula')[1].split('-')[0] if 'aula' in pasta_aula else "00"
    
    # Conte√∫do minimalista e educacional
    conteudo = f'''# Aula {aula_num}: Big Data em Python
# Professor: Vagner Cordeiro
# Arquivo: {nome_arquivo}

"""
üìö MATERIAL EDUCACIONAL SIMPLIFICADO
=====================================

Este arquivo foi simplificado para fins did√°ticos.
Foco: Aprendizado conceitual de Big Data em Python.

üéØ OBJETIVOS DA AULA:
‚Ä¢ Compreender conceitos fundamentais
‚Ä¢ Aplicar teoria na pr√°tica
‚Ä¢ Desenvolver pensamento anal√≠tico
‚Ä¢ Preparar para projetos reais

üìñ METODOLOGIA:
‚Ä¢ Explica√ß√µes claras e diretas
‚Ä¢ Exemplos pr√°ticos comentados
‚Ä¢ Exerc√≠cios progressivos
‚Ä¢ Recursos para aprofundamento

üí° PR√ìXIMOS PASSOS:
‚Ä¢ Consulte a documenta√ß√£o oficial
‚Ä¢ Pratique com datasets pequenos
‚Ä¢ Participe de comunidades online
‚Ä¢ Desenvolva projetos pessoais
"""

def main():
    \"\"\"Fun√ß√£o principal demonstrativa\"\"\"
    print("‚úÖ Arquivo simplificado para aprendizado")
    print("üìö Foque no entendimento conceitual")
    print("üöÄ Pronto para estudar Big Data!")

if __name__ == "__main__":
    main()
'''
    return conteudo

def simplificar_arquivo(caminho_arquivo):
    """Simplifica um arquivo Python individual"""
    try:
        # Extrair informa√ß√µes do caminho
        pasta_pai = os.path.dirname(caminho_arquivo)
        nome_arquivo = os.path.basename(caminho_arquivo)
        pasta_aula = os.path.basename(pasta_pai)
        
        # Criar conte√∫do simplificado
        conteudo_novo = criar_conteudo_simples(nome_arquivo, pasta_aula)
        
        # Escrever arquivo simplificado
        with open(caminho_arquivo, 'w', encoding='utf-8') as f:
            f.write(conteudo_novo)
            
        print(f"‚úÖ Simplificado: {caminho_arquivo}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro em {caminho_arquivo}: {e}")
        return False

def main():
    """Fun√ß√£o principal que simplifica todo o reposit√≥rio"""
    print("üöÄ INICIANDO SIMPLIFICA√á√ÉO COMPLETA DO REPOSIT√ìRIO")
    print("=" * 60)
    
    # Encontrar todos os arquivos Python nas aulas
    arquivos_aulas = glob.glob("aulas/**/*.py", recursive=True)
    
    sucessos = 0
    total = len(arquivos_aulas)
    
    print(f"üìÅ Encontrados {total} arquivos Python nas aulas")
    print()
    
    # Simplificar cada arquivo
    for arquivo in arquivos_aulas:
        if simplificar_arquivo(arquivo):
            sucessos += 1
    
    print()
    print("=" * 60)
    print(f"üéâ CONCLU√çDO!")
    print(f"‚úÖ {sucessos}/{total} arquivos simplificados com sucesso")
    print(f"üìä Taxa de sucesso: {(sucessos/total)*100:.1f}%")
    print()
    print("üéØ PR√ìXIMOS PASSOS:")
    print("1. Verificar se todos os arquivos compilam sem erro")
    print("2. Fazer commit das mudan√ßas")
    print("3. Atualizar o GitHub")
    print("4. Finalizar documenta√ß√£o do livro")
    
if __name__ == "__main__":
    main()
